function simulateStanTestData

ntrials = 1000; 
alpha = 0.610466;
stay = 0.946621;
beta = 0.991831;
lapse = .2;
side = .1; 

[reward,choice,state,qVal,probChoice,rpe]= simulateQ_withLapse(R,ntrials,T,alpha,beta,stay,silapse)

end

function [reward,choice,state,qVal,probChoice,rpe]= simulateQ(R,ntrials,T,alpha,beta,stay)


block = 2; 
q = zeros(2,1); 

reward = zeros(ntrials,1);
choice = zeros(ntrials,1);
state  = zeros(ntrials,1);
qVal   = zeros(ntrials+1,2); 
rpe = zeros(ntrials,1);
probChoice = zeros(ntrials,2);

rewardCounter = 0; 

for nt = 1:ntrials

    if nt>1
        if choice(nt-1)==1
            pc = -1;
        else
            pc = 1;
        end
        %if nargin==3
        block = min(find(rand(1) <= cumsum(T(:,block)))); % new state according to distribution T
        %    else
        %        if rewardCounter > 10
        %            if randi(10)<5
        %                block=abs(block-3);
        %                rewardCounter=0;
        %            end
        %        end
        %    end
        %     else
        %         pc   = 0;
        %     end
%         if choice(nt-1) == 1
%             I_r = 1;
%             I_l = 0;
%         else I_r = 0; I_l = 1;
%         end    %
    else
        pc = 0;
        %I_r = 0; I_l = 0; 
    end
            
            
%     
%     
%     P_r = exp(beta*q(1) + (stay*I_r));
%     P_l = exp(beta*q(2) + (stay*I_l));
%     total_p = P_r+P_l;
%     
%     prob(1) = P_r/total_p;
%     prob(2) = P_l/total_p;
    
    choice1 = beta.*q(1);
    choice2 = beta.*q(2);

%      
    prob(1) = 1 ./(1 + exp(choice2-choice1 + (stay*pc)));
    %prob(2) = 1 ./(1 + exp(choice1-choice2 + (stay*pc)));
    prob(2) = 1-prob(1);
%     
%     if prob(1)>prob(2)
%         c = 1;
%     elseif prob(1)<prob(2)
%         c = 2;
%     else
%         c = randi(2);
%     end
%     

if rand(1) < prob(1)
        c = 1;
    else
        c = 2;
    end
    
    r = rand(1)<R(block,c); 
    
    if r == 1
        rewardCounter = rewardCounter+1;
    end
    delta = r-q(c);
    q(c) = q(c) + (alpha * delta); % update chosen q value
    
    choice(nt) = c; % current choice
    reward(nt) = r; % current reward
    state(nt) = block; % current block
    rpe(nt) = delta; % current rpe
    probChoice(nt,:) = prob;% prob choice
    qVal(nt+1,:) = q; % updated value

end



end