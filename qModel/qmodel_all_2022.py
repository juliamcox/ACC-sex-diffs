#!/bin/env python

import numpy as np
import pandas as pd
import pystan
import scipy.io as scipy
import _pickle as cPickle
#from scipy.io
import stan_utility
import pandas as pd
import os
import pickle


def inv_logit(arr):
    '''Elementwise inverse logit (logistic) function.'''
    return 1 / (1 + np.exp(-arr))

def phi_approx(arr):
    '''Elementwise fast approximation of the cumulative unit normal.
    For details, see Bowling et al. (2009). "A logistic approximation
    to the cumulative normal distribution."'''
    return inv_logit(0.07056 * arr ** 3 + 1.5976 * arr)

def run_model():
# Create standata (load from data generated by dataForQ_bySession_all.m)
	data = scipy.loadmat('DataForQ/all_2022/all_toStan.mat')

	NA = data['NA']
	NS = data['NS']
	r  = data['r']
	c  = data['c']
	NT = data['NT']
	NT_all = data['NT_all']
	NS_all = data['NS_all']
	subj_idx = data['subj_idx']
	sess_idx = data['sess_idx']
	start_idx = data['start_idx']
	NS_tot = data['NS_tot']

	standata = 		{'NA':NA[0,0],'NS':NS[0,0],'NT':NT[0,0],'NT_all':NT_all,'r':r,'c':c,'NS_all':NS_all[:,0],'subj_idx':subj_idx[0,:],'sess_idx':sess_idx[0,:],'start_idx':start_idx[0,:],'NS_tot':NS_tot[0,0]}

# Compile the model

	sm = pystan.StanModel(os.path.join('qlearning_stay_side_session_v2.stan'))



# Fit model
	fit = sm.sampling(data=standata, iter=1000, warmup=250, chains = 1, control=dict(adapt_delta=0.99, max_treedepth=15))


	print(fit)

# Save data
	summary = fit.summary()
	summary = pd.DataFrame(summary['summary'], 	columns=summary['summary_colnames'], index=summary['summary_rownames'])
	summary.to_csv(os.path.join('DataForQ/all_2022/','summary_int_pc.csv'))

	extract = fit.extract()
	for k, v in extract.items(): extract[k] = v
	with open(os.path.join('DataForQ/all_2022/' 'StanFit_int_pc.pickle'), 'wb') as fn: cPickle.dump(extract, fn)

	samplerParams = fit.get_sampler_params()
	samplerParams = pd.DataFrame(samplerParams)
	summary.to_csv(os.path.join('DataForQ/all_2022/', 'samplerParams.csv'))

	with open(os.path.join('DataForQ/all_2022/', 'fit.pkl'), 'wb') as f:
		pickle.dump({'model' : sm, 'fit' : fit}, f, protocol=-1)

	with open(os.path.join('DataForQ/all_2022/' 'fit2.pkl'), 'wb') as f:
		pickle.dump([sm, fit], f, protocol=-1)

#    Extract data and save to mat
	alphas = phi_approx(extract['alphas'])
	betas = extract['betas']
	sides = extract['sides']
	stays = extract['stays']

	scipy.savemat(os.path.join('DataForQ/all_2022/', 'alphas.mat'),{'vect':alphas})
	scipy.savemat(os.path.join('DataForQ/all_2022/', 'betas.mat'),{'vect':betas})
	scipy.savemat(os.path.join('DataForQ/all_2022/', 'sides.mat'),{'vect':sides})
	scipy.savemat(os.path.join('DataForQ/all_2022/', 'stays.mat'),{'vect':stays})

	alphas = phi_approx(extract['alpha_mice_m'])
	betas = extract['beta_mice_m']
	sides = extract['side_mice_m']
	stays = extract['stay_mice_m']


	scipy.savemat(os.path.join('DataForQ/all_2022/', 'alphas_mice.mat'),{'alphas':alphas})
	scipy.savemat(os.path.join('DataForQ/all_2022/', 'betas_mice.mat'),{'betas':betas})
	scipy.savemat(os.path.join('DataForQ/all_2022/', 'sides_mice.mat'),{'sides':sides})
	scipy.savemat(os.path.join('DataForQ/all_2022/', 'stays_mice.mat'),{'stays':stays})


	print(pystan.check_hmc_diagnostics(fit))
